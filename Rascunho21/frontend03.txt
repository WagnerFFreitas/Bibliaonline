Ok, vamos adicionar as funcionalidades que você mencionou ao seu aplicativo da Bíblia!

1. Frontend (HTML, CSS, JavaScript):

HTML (index.html):

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bíblia Online</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header>
        <h1>Bíblia Online</h1>
        <nav>
            <ul>
                <li><a href="#" id="login-link">Login</a></li>
                <li><a href="#" id="registro-link">Registro</a></li>
                <li><a href="#" id="sair-link">Sair</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="pesquisa">
            <input type="text" id="pesquisa-versiculo" placeholder="Pesquisar versículo...">
        </section>

        <section id="menu">
            <h2>Selecione o Versículo</h2>
            <div>
                <select id="livro"></select>
                <select id="capitulo"></select>
                <select id="versiculo"></select>
            </div>
        </section>

        <section id="texto">
            <p></p>
        </section>

        <section id="acoes">
            <button id="adicionar-marcador">Adicionar Marcador</button>
            <button id="compartilhar">Compartilhar</button>
        </section>

        <section id="marcadores">
            <h2>Seus Marcadores</h2>
            <ul id="lista-marcadores"></ul>
        </section>

        <section id="notas">
            <h2>Notas</h2>
            <textarea id="nota" placeholder="Adicione suas notas aqui..."></textarea>
        </section>
    </main>

    <script src="script.js"></script>
</body>
</html>
content_copy
Use code with caution.
Html

CSS (style.css):

/* ... (estilos anteriores) */

nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
    text-align: right;
}

nav li {
    display: inline-block;
    margin-left: 15px;
}

#pesquisa {
    margin-bottom: 20px;
}

#pesquisa-versiculo {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
    width: 100%;
}

#marcadores, #notas {
    margin-top: 20px;
}

#lista-marcadores {
    list-style: none;
    padding: 0;
}

#lista-marcadores li {
    margin-bottom: 5px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
    cursor: pointer;
}

#nota {
    width: 100%;
    height: 100px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
    resize: vertical;
}
content_copy
Use code with caution.
Css

JavaScript (script.js):

// Obter elementos do DOM
const livroSelect = document.getElementById('livro');
const capituloSelect = document.getElementById('capitulo');
const versiculoSelect = document.getElementById('versiculo');
const textoElement = document.querySelector('#texto p');
const adicionarMarcadorButton = document.getElementById('adicionar-marcador');
const compartilharButton = document.getElementById('compartilhar');
const pesquisaVersiculoInput = document.getElementById('pesquisa-versiculo');
const listaMarcadoresElement = document.getElementById('lista-marcadores');
const notaElement = document.getElementById('nota');

// ... (funções buscarVersiculo, adicionarMarcador, compartilharVersiculo, popularMenus)

// Função para pesquisar versículo
function pesquisarVersiculo() {
    const termoPesquisa = pesquisaVersiculoInput.value;
    // Faz uma requisição AJAX para o backend com o termo de pesquisa
    fetch(`http://localhost:3000/api/pesquisar/${termoPesquisa}`)
        .then(response => response.json())
        .then(data => {
            // Atualiza a interface com os resultados da pesquisa
            // ...
        })
        .catch(error => {
            console.error('Erro ao pesquisar versículo:', error);
        });
}

// Função para exibir marcadores
function exibirMarcadores() {
    // Faz uma requisição AJAX para o backend para buscar os marcadores do usuário
    fetch('http://localhost:3000/api/marcadores')
        .then(response => response.json())
        .then(marcadores => {
            listaMarcadoresElement.innerHTML = ''; // Limpa a lista
            marcadores.forEach(marcador => {
                const li = document.createElement('li');
                li.textContent = `${marcador.livro} ${marcador.capitulo}:${marcador.versiculo}`;
                li.addEventListener('click', () => {
                    // Carrega o versículo selecionado
                    setLivro(marcador.livro);
                    setCapitulo(marcador.capitulo);
                    setVersiculo(marcador.versiculo);
                    buscarVersiculo();
                });
                listaMarcadoresElement.appendChild(li);
            });
        })
        .catch(error => {
            console.error('Erro ao buscar marcadores:', error);
        });
}

// Função para lidar com o login
function logar() {
    // ...
}

// Função para lidar com o registro
function registrar() {
    // ...
}

// Função para lidar com a saída
function sair() {
    // ...
}

// Adicione eventos para os botões de login, registro e sair
document.getElementById('login-link').addEventListener('click', logar);
document.getElementById('registro-link').addEventListener('click', registrar);
document.getElementById('sair-link').addEventListener('click', sair);

// Adicione eventos aos botões
adicionarMarcadorButton.addEventListener('click', adicionarMarcador);
compartilharButton.addEventListener('click', compartilharVersiculo);
pesquisaVersiculoInput.addEventListener('keyup', pesquisarVersiculo); // Pesquisa ao digitar

// Popular os menus ao carregar a página
window.onload = popularMenus;
exibirMarcadores(); // Exibe os marcadores ao carregar
content_copy
Use code with caution.
Js

2. Backend (Node.js, Express.js e MySQL):

Rotas da API:

// ... (rotas anteriores)

app.post('/api/login', async (req, res) => {
  // ...
});

app.post('/api/registrar', async (req, res) => {
  // ...
});

app.post('/api/sair', authenticateToken, (req, res) => {
  // ...
});

app.post('/api/marcadores', authenticateToken, (req, res) => {
  // ...
});

app.get('/api/marcadores', authenticateToken, (req, res) => {
  // ...
});

app.get('/api/pesquisar/:termo', (req, res) => {
  // ...
});
content_copy
Use code with caution.
Js

Lógica do Backend:

// ... (rotas de login, registro, sair, marcadores, pesquisa)

// Função para buscar versículos por palavra-chave
app.get('/api/pesquisar/:termo', (req, res) => {
    const termo = req.params.termo;
    const query = `SELECT * FROM versiculos WHERE texto LIKE '%${termo}%'`;
    db.query(query, (err, result) => {
        if (err) {
            res.status(500).send('Erro ao pesquisar versículos');
        } else {
            res.json(result);
        }
    });
});

// Função para buscar marcadores do usuário
app.get('/api/marcadores', authenticateToken, (req, res) => {
    const userId = req.userId;
    const query = `SELECT l.nome AS livro, c.numero AS capitulo, v.numero AS versiculo 
                    FROM marcadores m
                    JOIN versiculos v ON m.versiculo_id = v.id
                    JOIN capitulos c ON v.capitulo_id = c.id
                    JOIN livros l ON c.livro_id = l.id
                    WHERE m.usuario_id = ?`;
    db.query(query, [userId], (err, result) => {
        if (err) {
            res.status(500).send('Erro ao buscar marcadores');
        } else {
            res.json(result);
        }
    });
});
content_copy
Use code with caution.
Js

Observações Importantes:

Autenticação: Implemente a lógica de login, registro e logout para os usuários. Utilize JWT para autenticação e bcrypt para criptografar senhas.

Segurança: Implemente medidas de segurança para proteger a API contra ataques.

Testes: Escreva testes unitários e de integração para garantir a qualidade do código.

Design Responsivo: Crie um design responsivo que se adapta a diferentes dispositivos.

Tratamento de Erros: Implemente mecanismos para lidar com erros e exceções.

Recursos Adicionais: Você pode adicionar mais recursos, como:

Notas

Planos de leitura

Opções de personalização

Compartilhamento em redes sociais

Interface para gerenciar marcadores

Lembre-se: Este é um guia básico e você precisará adaptá-lo para suas necessidades específicas. A construção de um aplicativo web completo exige tempo, dedicação e conhecimento.

Espero que esta resposta te ajude a criar seu aplicativo da Bíblia!