Boa tarde! Posso ajudar você a 

Se os topicos estiver duplicado me perdoa e porque fui pensando e escrevendo, criar um aplicativo web da Bíblia com os topicos abaixo:

1-Estrutura do aplicativo:
Página inicial com menu de livros, capítulos e versículos
Sistema de busca por palavras-chave
Opção de marcadores e notas pessoais


2-Funcionalidades:
Navegação fácil entre livros e capítulos
Modo de leitura noturna
Compartilhamento de versículos em redes sociais (sem reproduzir o texto completo)
Planos de leitura personalizados

3-Design:
Interface limpa e intuitiva
Tipografia legível
Esquema de cores agradável

4-Tecnologias sugeridas:
Frontend: HTML5, CSS3, JavaScript, mysql

5-Adicionar uma base de dados com o texto real da Bíblia e os hinos da Harpa Cristã
Implementar a lógica para buscar e exibir o conteúdo correto

6-Adicionar funcionalidades para marcadores e compartilhamento
Implementar uma busca por palavras-chave
Adicionar mais recursos como planos de leitura, notas, etc.

7-Interface para selecionar livro, capítulo e versículo
Botão para alternar entre tema claro e escuro
Simulação de busca de versículo (sem texto real)
Simulação de adição de marcador e compartilhamento

8-Backend - frontend
9-Banco de dados: mysql
10-Login e registro de usuários
11-Busca de versículos e hinos
12-Adição de marcadores e notas
13-Compartilhamento de conteúdo
14-Busca por palavra-chave
15-Planos de leitura básicos
16-Implementar tratamento de erros mais robusto
17-Adicionar validação de entrada de dados
18-Implementar um sistema de logout
19-Melhorar a segurança (por exemplo, usando HTTPS)
20-Adicionar mais funcionalidades aos planos de leitura
21-Implementar um sistema para carregar o banco de dados com o conteúdo real da Bíblia e da Harpa Cristã
22-Melhorar a interface do usuário, possivelmente usando um framework front-end como React, Vue.js ou Angular
23-Implementar testes unitários e de integração
Configurar um ambiente de produção (por exemplo, usando PM2 para gerenciar o processo Node.js)
24-Implementar um sistema de cache para melhorar o desempenho



Considerações legais:

Verifique a licença da versão João Ferreira Almeida que você pretende usar
Considere usar uma API de Bíblia existente que já tenha as permissões necessárias
Se necessário, entre em contato com os detentores dos direitos autorais para obter permissão



Gostaria que eu elaborasse algum desses pontos ou que discutíssemos algum aspecto específico do desenvolvimento do aplicativo?


Primeiro, vamos configurar o projeto React. Você precisará ter o Node.js instalado e então poderá criar um novo projeto React usando:

bash

npx create-react-app biblia-app
cd biblia-app

Agora, vamos substituir o conteúdo de src/App.js com o seguinte código:

import React, { useState } from 'react';
import './App.css';

function App() {
  const [livro, setLivro] = useState('Gênesis');
  const [capitulo, setCapitulo] = useState(1);
  const [versiculo, setVersiculo] = useState(1);
  const [tema, setTema] = useState('claro');

  const livros = ['Gênesis', 'Êxodo', 'Levítico']; // Adicione todos os livros

  const toggleTema = () => {
    setTema(tema === 'claro' ? 'escuro' : 'claro');
  };

  return (
    <div className={`App ${tema}`}>
      <header>
        <h1>Bíblia Online</h1>
        <button onClick={toggleTema}>Alternar Tema</button>
      </header>
      <nav>
        <select value={livro} onChange={(e) => setLivro(e.target.value)}>
          {livros.map((l) => (
            <option key={l} value={l}>{l}</option>
          ))}
        </select>
        <input 
          type="number" 
          value={capitulo}
          onChange={(e) => setCapitulo(e.target.value)}
          min="1"
        />
        <input 
          type="number" 
          value={versiculo}
          onChange={(e) => setVersiculo(e.target.value)}
          min="1"
        />
      </nav>
      <main>
        <p>Texto do versículo iria aqui.</p>
      </main>
      <footer>
        <button>Adicionar Marcador</button>
        <button>Compartilhar</button>
      </footer>
    </div>
  );
}

export default App;


.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.claro {
  background-color: #f0f0f0;
  color: #333;
}

.escuro {
  background-color: #333;
  color: #f0f0f0;
}

header {
  background-color: #4a90e2;
  padding: 20px;
  color: white;
}

nav {
  padding: 20px;
}

main {
  flex-grow: 1;
  padding: 20px;
}

footer {
  padding: 20px;
}

button {
  margin: 0 10px;
  padding: 10px 20px;
  font-size: 16px;
}

select, input {
  margin: 0 10px;
  padding: 5px;
  font-size: 16px;
}

Implementar um backend (por exemplo, usando Node.js e Express) para servir o conteúdo bíblico.
Criar uma API para buscar versículos, capítulos e livros.
Implementar a funcionalidade de busca.
Adicionar um sistema de autenticação para salvar marcadores e notas pessoais.
Implementar a funcionalidade de compartilhamento.

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bíblia Online</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="app">
        <header>
            <h1>Bíblia Online</h1>
            <button id="toggleTheme">Alternar Tema</button>
        </header>
        <nav>
            <select id="bookSelect">
                <option value="genesis">Gênesis</option>
                <option value="exodo">Êxodo</option>
                <option value="levitico">Levítico</option>
                <!-- Adicione mais livros aqui -->
            </select>
            <input type="number" id="chapterInput" min="1" value="1">
            <input type="number" id="verseInput" min="1" value="1">
            <button id="searchButton">Buscar</button>
        </nav>
        <main>
            <p id="verseText">Selecione um livro, capítulo e versículo para começar.</p>
        </main>
        <footer>
            <button id="bookmarkButton">Adicionar Marcador</button>
            <button id="shareButton">Compartilhar</button>
        </footer>
    </div>
    <script src="script.js"></script>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

#app {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

header {
    background-color: #4a90e2;
    color: white;
    padding: 1rem;
    text-align: center;
}

nav {
    padding: 1rem;
    display: flex;
    justify-content: center;
    gap: 0.5rem;
}

main {
    flex-grow: 1;
    padding: 1rem;
    text-align: center;
}

footer {
    padding: 1rem;
    text-align: center;
}

button {
    padding: 0.5rem 1rem;
    font-size: 1rem;
}

select, input {
    padding: 0.5rem;
    font-size: 1rem;
}

.dark-theme {
    background-color: #333;
    color: #f0f0f0;
}

.dark-theme header {
    background-color: #1a1a1a;
}

document.addEventListener('DOMContentLoaded', () => {
    const app = document.getElementById('app');
    const toggleThemeButton = document.getElementById('toggleTheme');
    const bookSelect = document.getElementById('bookSelect');
    const chapterInput = document.getElementById('chapterInput');
    const verseInput = document.getElementById('verseInput');
    const searchButton = document.getElementById('searchButton');
    const verseText = document.getElementById('verseText');
    const bookmarkButton = document.getElementById('bookmarkButton');
    const shareButton = document.getElementById('shareButton');

    // Alternar tema
    toggleThemeButton.addEventListener('click', () => {
        app.classList.toggle('dark-theme');
    });

    // Simular busca de versículo
    searchButton.addEventListener('click', () => {
        const book = bookSelect.value;
        const chapter = chapterInput.value;
        const verse = verseInput.value;
        verseText.textContent = `${book.charAt(0).toUpperCase() + book.slice(1)} ${chapter}:${verse} - Texto do versículo iria aqui.`;
    });

    // Simular adição de marcador
    bookmarkButton.addEventListener('click', () => {
        alert('Marcador adicionado!');
    });

    // Simular compartilhamento
    shareButton.addEventListener('click', () => {
        alert('Compartilhado!');
    });
});

Interface para selecionar livro, capítulo e versículo
Botão para alternar entre tema claro e escuro
Simulação de busca de versículo (sem texto real)
Simulação de adição de marcador e compartilhamento

Para usar este código:

Crie três arquivos: index.html, styles.css, e script.js
Cole o código correspondente em cada arquivo
Abra o arquivo index.html em um navegador web


Adicionar uma base de dados com o texto bíblico real
Implementar busca por palavras-chave
Adicionar funcionalidade real para marcadores e compartilhamento
Implementar planos de leitura
Adicionar mais livros da Bíblia ao seletor

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bíblia e Harpa Cristã Online</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="app">
        <header>
            <h1>Bíblia e Harpa Cristã Online</h1>
            <button id="toggleTheme">Alternar Tema</button>
        </header>
        <nav>
            <select id="contentType">
                <option value="bible">Bíblia</option>
                <option value="hymnal">Harpa Cristã</option>
            </select>
            <select id="bookSelect"></select>
            <input type="number" id="chapterInput" min="1" value="1">
            <input type="number" id="verseInput" min="1" value="1">
            <button id="searchButton">Buscar</button>
        </nav>
        <main>
            <p id="contentText">Selecione um livro ou hino para começar.</p>
        </main>
        <footer>
            <button id="bookmarkButton">Adicionar Marcador</button>
            <button id="shareButton">Compartilhar</button>
        </footer>
    </div>
    <script src="script.js"></script>
</body>
</html>

document.addEventListener('DOMContentLoaded', () => {
    const app = document.getElementById('app');
    const toggleThemeButton = document.getElementById('toggleTheme');
    const contentType = document.getElementById('contentType');
    const bookSelect = document.getElementById('bookSelect');
    const chapterInput = document.getElementById('chapterInput');
    const verseInput = document.getElementById('verseInput');
    const searchButton = document.getElementById('searchButton');
    const contentText = document.getElementById('contentText');
    const bookmarkButton = document.getElementById('bookmarkButton');
    const shareButton = document.getElementById('shareButton');

    const bibleBooks = [
        "Gênesis", "Êxodo", "Levítico", "Números", "Deuteronômio", "Josué", "Juízes", "Rute", "1 Samuel", "2 Samuel",
        "1 Reis", "2 Reis", "1 Crônicas", "2 Crônicas", "Esdras", "Neemias", "Ester", "Jó", "Salmos", "Provérbios",
        "Eclesiastes", "Cânticos", "Isaías", "Jeremias", "Lamentações", "Ezequiel", "Daniel", "Oseias", "Joel", "Amós",
        "Obadias", "Jonas", "Miqueias", "Naum", "Habacuque", "Sofonias", "Ageu", "Zacarias", "Malaquias",
        "Mateus", "Marcos", "Lucas", "João", "Atos", "Romanos", "1 Coríntios", "2 Coríntios", "Gálatas", "Efésios",
        "Filipenses", "Colossenses", "1 Tessalonicenses", "2 Tessalonicenses", "1 Timóteo", "2 Timóteo", "Tito",
        "Filemom", "Hebreus", "Tiago", "1 Pedro", "2 Pedro", "1 João", "2 João", "3 João", "Judas", "Apocalipse"
    ];

    function populateBookSelect(books) {
        bookSelect.innerHTML = '';
        books.forEach((book, index) => {
            const option = document.createElement('option');
            option.value = index + 1;
            option.textContent = book;
            bookSelect.appendChild(option);
        });
    }

    populateBookSelect(bibleBooks);

    contentType.addEventListener('change', () => {
        if (contentType.value === 'bible') {
            populateBookSelect(bibleBooks);
            chapterInput.style.display = 'inline';
            verseInput.style.display = 'inline';
        } else {
            // Popule com números de 1 a 640 para os hinos da Harpa Cristã
            const harpHymns = Array.from({length: 640}, (_, i) => i + 1);
            populateBookSelect(harpHymns);
            chapterInput.style.display = 'none';
            verseInput.style.display = 'none';
        }
    });

    toggleThemeButton.addEventListener('click', () => {
        app.classList.toggle('dark-theme');
    });

    searchButton.addEventListener('click', () => {
        if (contentType.value === 'bible') {
            const book = bibleBooks[bookSelect.value - 1];
            const chapter = chapterInput.value;
            const verse = verseInput.value;
            contentText.textContent = `${book} ${chapter}:${verse} - Texto do versículo iria aqui.`;
        } else {
            const hymnNumber = bookSelect.value;
            contentText.textContent = `Hino ${hymnNumber} - Texto do hino iria aqui.`;
        }
    });

    bookmarkButton.addEventListener('click', () => {
        alert('Marcador adicionado!');
    });

    shareButton.addEventListener('click', () => {
        alert('Compartilhado!');
    });
});

Este código fornece uma estrutura para:

Alternar entre a Bíblia e a Harpa Cristã
Selecionar qualquer livro da Bíblia ou hino da Harpa Cristã
Simular a busca de versículos ou hinos

Lembre-se de que este é apenas um esqueleto. Para um aplicativo funcional, você precisaria:



1 Base de dados (simulada com objetos JavaScript):

const bibliaDB = {
    "Gênesis": {
        1: {
            1: "No princípio, Deus criou os céus e a terra.",
            2: "Era a terra sem forma e vazia; trevas cobriam a face do abismo, e o Espírito de Deus se movia sobre a face das águas.",
            // ... mais versículos
        },
        // ... mais capítulos
    },
    // ... mais livros
};

const harpaDB = {
    1: {
        titulo: "Chuvas de Graça",
        letra: "Deus prometeu com certeza\nChuvas de graça mandar...",
        // ... resto da letra
    },
    // ... mais hinos
};

2 Lógica para buscar e exibir conteúdo

function buscarConteudo(tipo, livro, capitulo, versiculo) {
    if (tipo === 'biblia') {
        return bibliaDB[livro][capitulo][versiculo] || "Versículo não encontrado.";
    } else {
        return harpaDB[livro].letra || "Hino não encontrado.";
    }
}

searchButton.addEventListener('click', () => {
    const tipo = contentType.value;
    const livro = bookSelect.options[bookSelect.selectedIndex].text;
    const capitulo = parseInt(chapterInput.value);
    const versiculo = parseInt(verseInput.value);
    
    contentText.textContent = buscarConteudo(tipo, livro, capitulo, versiculo);
});

3 Funcionalidades para marcadores e compartilhamento

let marcadores = [];

function adicionarMarcador() {
    const tipo = contentType.value;
    const livro = bookSelect.options[bookSelect.selectedIndex].text;
    const capitulo = chapterInput.value;
    const versiculo = verseInput.value;
    
    marcadores.push({ tipo, livro, capitulo, versiculo });
    localStorage.setItem('marcadores', JSON.stringify(marcadores));
}

function compartilhar() {
    const texto = contentText.textContent;
    if (navigator.share) {
        navigator.share({
            title: 'Bíblia e Harpa Cristã Online',
            text: texto,
            url: window.location.href,
        });
    } else {
        alert("Texto copiado para a área de transferência: " + texto);
    }
}

bookmarkButton.addEventListener('click', adicionarMarcador);
shareButton.addEventListener('click', compartilhar);

4 Busca por palavras-chave:

function buscarPalavraChave(palavra) {
    let resultados = [];
    
    for (let livro in bibliaDB) {
        for (let capitulo in bibliaDB[livro]) {
            for (let versiculo in bibliaDB[livro][capitulo]) {
                if (bibliaDB[livro][capitulo][versiculo].includes(palavra)) {
                    resultados.push({
                        livro,
                        capitulo,
                        versiculo,
                        texto: bibliaDB[livro][capitulo][versiculo]
                    });
                }
            }
        }
    }
    
    return resultados;
}

// Adicione um campo de busca no HTML e um botão para acionar a busca
const searchInput = document.getElementById('searchInput');
const searchKeywordButton = document.getElementById('searchKeywordButton');

searchKeywordButton.addEventListener('click', () => {
    const palavra = searchInput.value;
    const resultados = buscarPalavraChave(palavra);
    // Exiba os resultados na interface
});

5 Planos de leitura e notas:

const planosLeitura = {
    "Novo Testamento em 30 dias": [
        { livro: "Mateus", capitulos: [1, 2, 3, 4, 5] },
        { livro: "Mateus", capitulos: [6, 7, 8, 9, 10] },
        // ... mais dias
    ],
    // ... mais planos
};

let notasUsuario = {};

function salvarNota(livro, capitulo, versiculo, nota) {
    if (!notasUsuario[livro]) notasUsuario[livro] = {};
    if (!notasUsuario[livro][capitulo]) notasUsuario[livro][capitulo] = {};
    notasUsuario[livro][capitulo][versiculo] = nota;
    localStorage.setItem('notas', JSON.stringify(notasUsuario));
}

// Adicione campos na interface para selecionar planos de leitura e adicionar notas

---
Estrutura do Banco de Dados MySQL

Backend em Node.js com Express

Frontend em HTML, CSS e JavaScript

Primeiro, a estrutura do banco de dados MySQL:

-- Criar o banco de dados
CREATE DATABASE biblia_harpa_app;
USE biblia_harpa_app;

-- Tabela para livros da Bíblia
CREATE TABLE livros (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(50) NOT NULL
);

-- Tabela para versículos
CREATE TABLE versiculos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    livro_id INT,
    capitulo INT,
    versiculo INT,
    texto TEXT,
    FOREIGN KEY (livro_id) REFERENCES livros(id)
);

-- Tabela para hinos
CREATE TABLE hinos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    numero INT,
    titulo VARCHAR(100),
    letra TEXT
);

-- Tabela para usuários
CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    senha VARCHAR(255)
);

-- Tabela para marcadores
CREATE TABLE marcadores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT,
    tipo ENUM('biblia', 'harpa'),
    referencia VARCHAR(50),
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

-- Tabela para notas
CREATE TABLE notas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT,
    tipo ENUM('biblia', 'harpa'),
    referencia VARCHAR(50),
    texto TEXT,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

Agora, vamos criar a estrutura do backend em Node.js com Express


// app.js
const express = require('express');
const mysql = require('mysql2');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

const db = mysql.createConnection({
    host: 'localhost',
    user: 'seu_usuario',
    password: 'sua_senha',
    database: 'biblia_harpa_app'
});

db.connect((err) => {
    if (err) throw err;
    console.log('Conectado ao banco de dados MySQL');
});

// Rota para buscar versículo
app.get('/api/versiculo/:livro/:capitulo/:versiculo', (req, res) => {
    const { livro, capitulo, versiculo } = req.params;
    const query = `
        SELECT v.texto 
        FROM versiculos v 
        JOIN livros l ON v.livro_id = l.id 
        WHERE l.nome = ? AND v.capitulo = ? AND v.versiculo = ?
    `;
    db.query(query, [livro, capitulo, versiculo], (err, result) => {
        if (err) throw err;
        res.json(result[0] || { texto: 'Versículo não encontrado' });
    });
});

// Rota para buscar hino
app.get('/api/hino/:numero', (req, res) => {
    const { numero } = req.params;
    db.query('SELECT * FROM hinos WHERE numero = ?', [numero], (err, result) => {
        if (err) throw err;
        res.json(result[0] || { texto: 'Hino não encontrado' });
    });
});

// Rota para registro de usuário
app.post('/api/register', async (req, res) => {
    const { nome, email, senha } = req.body;
    const hashedSenha = await bcrypt.hash(senha, 10);
    db.query('INSERT INTO usuarios (nome, email, senha) VALUES (?, ?, ?)', 
        [nome, email, hashedSenha], 
        (err, result) => {
            if (err) {
                res.status(500).json({ error: 'Erro ao registrar usuário' });
            } else {
                res.status(201).json({ message: 'Usuário registrado com sucesso' });
            }
        }
    );
});

// Rota para login
app.post('/api/login', (req, res) => {
    const { email, senha } = req.body;
    db.query('SELECT * FROM usuarios WHERE email = ?', [email], async (err, results) => {
        if (err) throw err;
        if (results.length > 0) {
            const comparison = await bcrypt.compare(senha, results[0].senha);
            if (comparison) {
                const token = jwt.sign({ id: results[0].id }, 'seu_segredo_jwt', { expiresIn: '1h' });
                res.json({ token });
            } else {
                res.status(400).json({ error: 'Senha incorreta' });
            }
        } else {
            res.status(404).json({ error: 'Usuário não encontrado' });
        }
    });
});

// Middleware para verificar token
function verifyToken(req, res, next) {
    const bearerHeader = req.headers['authorization'];
    if (typeof bearerHeader !== 'undefined') {
        const bearer = bearerHeader.split(' ');
        const bearerToken = bearer[1];
        jwt.verify(bearerToken, 'seu_segredo_jwt', (err, authData) => {
            if (err) {
                res.sendStatus(403);
            } else {
                req.userId = authData.id;
                next();
            }
        });
    } else {
        res.sendStatus(403);
    }
}

// Rota para adicionar marcador
app.post('/api/marcador', verifyToken, (req, res) => {
    const { tipo, referencia } = req.body;
    db.query('INSERT INTO marcadores (usuario_id, tipo, referencia) VALUES (?, ?, ?)', 
        [req.userId, tipo, referencia], 
        (err, result) => {
            if (err) throw err;
            res.status(201).json({ message: 'Marcador adicionado com sucesso' });
        }
    );
});

// Rota para adicionar nota
app.post('/api/nota', verifyToken, (req, res) => {
    const { tipo, referencia, texto } = req.body;
    db.query('INSERT INTO notas (usuario_id, tipo, referencia, texto) VALUES (?, ?, ?, ?)', 
        [req.userId, tipo, referencia, texto], 
        (err, result) => {
            if (err) throw err;
            res.status(201).json({ message: 'Nota adicionada com sucesso' });
        }
    );
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Servidor rodando na porta ${PORT}`));

Agora, vamos criar a estrutura do frontend em HTML, CSS e JavaScript

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bíblia e Harpa Cristã Online</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="app">
        <header>
            <h1>Bíblia e Harpa Cristã Online</h1>
            <button id="toggleTheme">Alternar Tema</button>
            <div id="userSection">
                <button id="loginButton">Login</button>
                <button id="registerButton">Registrar</button>
            </div>
        </header>
        <nav>
            <select id="contentType">
                <option value="bible">Bíblia</option>
                <option value="hymnal">Harpa Cristã</option>
            </select>
            <select id="bookSelect"></select>
            <input type="number" id="chapterInput" min="1" value="1">
            <input type="number" id="verseInput" min="1" value="1">
            <button id="searchButton">Buscar</button>
        </nav>
        <main>
            <p id="contentText">Selecione um livro ou hino para começar.</p>
        </main>
        <footer>
            <button id="bookmarkButton">Adicionar Marcador</button>
            <button id="shareButton">Compartilhar</button>
            <button id="noteButton">Adicionar Nota</button>
        </footer>
    </div>
    <script src="script.js"></script>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

#app {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

header {
    background-color: #4a90e2;
    color: white;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

nav {
    padding: 1rem;
    display: flex;
    justify-content: center;
    gap: 0.5rem;
}

main {
    flex-grow: 1;
    padding: 1rem;
    text-align: center;
}

footer {
    padding: 1rem;
    text-align: center;
}

button {
    padding: 0.5rem 1rem;
    font-size: 1rem;
    cursor: pointer;
}

select, input {
    padding: 0.5rem;
    font-size: 1rem;
}

.dark-theme {
    background-color: #333;
    color: #f0f0f0;
}

.dark-theme header {
    background-color: #1a1a1a;
}


document.addEventListener('DOMContentLoaded', () => {
    const app = document.getElementById('app');
    const toggleThemeButton = document.getElementById('toggleTheme');
    const contentType = document.getElementById('contentType');
    const bookSelect = document.getElementById('bookSelect');
    const chapterInput = document.getElementById('chapterInput');
    const verseInput = document.getElementById('verseInput');
    const searchButton = document.getElementById('searchButton');
    const contentText = document.getElementById('contentText');
    const bookmarkButton = document.getElementById('bookmarkButton');
    const shareButton = document.getElementById('shareButton');
    const noteButton = document.getElementById('noteButton');
    const loginButton = document.getElementById('loginButton');
    const registerButton = document.getElementById('registerButton');

    const API_URL = 'http://localhost:3000/api';

    const bibleBooks = [
        "Gênesis", "Êxodo", "Levítico", "Números", "Deuteronômio", "Josué", "Juízes", "Rute", "1 Samuel", "2 Samuel",
        "1 Reis", "2 Reis", "1 Crônicas", "2 Crônicas", "Esdras", "Neemias", "Ester", "Jó", "Salmos", "Provérbios",
        "Eclesiastes", "Cânticos", "Isaías", "Jeremias", "Lamentações", "Ezequiel", "Daniel", "Oseias", "Joel", "Amós",
        "Obadias", "Jonas", "Miqueias", "Naum", "Habacuque", "Sofonias", "Ageu", "Zacarias", "Malaquias",
        "Mateus", "Marcos", "Lucas", "João", "Atos", "Romanos", "1 Coríntios", "2 Coríntios", "Gálatas", "Efésios",
        "Filipenses", "Colossenses", "1 Tessalonicenses", "2 Tessalonicenses", "1 Timóteo", "2 Timóteo", "Tito",
        "Filemom", "Hebreus", "Tiago", "1 Pedro", "2 Pedro", "1 João", "2 João", "3 João", "Judas", "Apocalipse"
    ];

    function populateBookSelect(books) {
        bookSelect.innerHTML = '';
        books.forEach((book, index) => {
            const option = document.createElement('option');
            option.value = book;
            option.textContent = book;
            bookSelect.appendChild(option);
        });
    }

    populateBookSelect(bibleBooks);

    contentType.addEventListener('change', () => {
        if (contentType.value === 'bible') {
            populateBookSelect(bibleBooks);
            chapterInput.style.display = 'inline';
            verseInput.style.display = 'inline';
        } else {
            const harpHymns = Array.from({length: 640}, (_, i) => i + 1);
            populateBookSelect(harpHymns);
            chapterInput.style.display = 'none';
            verseInput.style.display = 'none';
        }
    });

    toggleThemeButton.addEventListener('click', () => {
        app.classList.toggle('dark-theme');
    });

    searchButton.addEventListener('click', async () => {
        const tipo = contentType.value;
        const livro = bookSelect.value;
        const capitulo = chapterInput.value;
        const versiculo = verseInput.value;

        try {
            let response;
            if (tipo === 'bible') {
                response = await fetch(`${API_URL}/versiculo/${livro}/${capitulo}/${versiculo}`);
            } else {
                response = await fetch(`${API_URL}/hino/${livro}`);
            }
            const data = await response.json();
            contentText.textContent = data.texto || 'Conteúdo não encontrado.';
        } catch (error) {
            console.error('Erro ao buscar conteúdo:', error);
            contentText.textContent = 'Erro ao buscar conteúdo.';
        }
    });

    bookmarkButton.addEventListener('click', async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            alert('Faça login para adicionar marcadores.');
            return;
        }

        const tipo = contentType.value;
        const referencia = tipo === 'bible' 
            ? `${bookSelect.value} ${chapterInput.value}:${verseInput.value}`
            : `Hino ${bookSelect.value}`;

        try {
            const response = await fetch(`${API_URL}/marcador`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ tipo, referencia })
            });
            const data = await response.json();
            alert(data.message);
        } catch (error) {
            console.error('Erro ao adicionar marcador:', error);
            alert('Erro ao adicionar marcador.');
        }
    });

    shareButton.addEventListener('click', () => {
        const texto = contentText.textContent;
        if (navigator.share) {
            navigator.share({
                title: 'Bíblia e Harpa Cristã Online',
                text: texto,
                url: window.location.href,
            });
        } else {
            alert
// ... (código anterior)

    shareButton.addEventListener('click', () => {
        const texto = contentText.textContent;
        if (navigator.share) {
            navigator.share({
                title: 'Bíblia e Harpa Cristã Online',
                text: texto,
                url: window.location.href,
            });
        } else {
            alert("Texto copiado para a área de transferência: " + texto);
            navigator.clipboard.writeText(texto);
        }
    });

    noteButton.addEventListener('click', async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            alert('Faça login para adicionar notas.');
            return;
        }

        const tipo = contentType.value;
        const referencia = tipo === 'bible' 
            ? `${bookSelect.value} ${chapterInput.value}:${verseInput.value}`
            : `Hino ${bookSelect.value}`;
        const texto = prompt('Digite sua nota:');

        if (!texto) return;

        try {
            const response = await fetch(`${API_URL}/nota`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ tipo, referencia, texto })
            });
            const data = await response.json();
            alert(data.message);
        } catch (error) {
            console.error('Erro ao adicionar nota:', error);
            alert('Erro ao adicionar nota.');
        }
    });

    loginButton.addEventListener('click', async () => {
        const email = prompt('Digite seu email:');
        const senha = prompt('Digite sua senha:');

        try {
            const response = await fetch(`${API_URL}/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email, senha })
            });
            const data = await response.json();
            if (data.token) {
                localStorage.setItem('token', data.token);
                alert('Login realizado com sucesso!');
                loginButton.style.display = 'none';
                registerButton.style.display = 'none';
            } else {
                alert('Erro no login: ' + data.error);
            }
        } catch (error) {
            console.error('Erro no login:', error);
            alert('Erro ao fazer login.');
        }
    });

    registerButton.addEventListener('click', async () => {
        const nome = prompt('Digite seu nome:');
        const email = prompt('Digite seu email:');
        const senha = prompt('Digite sua senha:');

        try {
            const response = await fetch(`${API_URL}/register`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ nome, email, senha })
            });
            const data = await response.json();
            alert(data.message);
        } catch (error) {
            console.error('Erro no registro:', error);
            alert('Erro ao registrar usuário.');
        }
    });

    // Função para verificar se o usuário está logado ao carregar a página
    function checkLoginStatus() {
        const token = localStorage.getItem('token');
        if (token) {
            loginButton.style.display = 'none';
            registerButton.style.display = 'none';
        }
    }

    checkLoginStatus();
});

Agora, vamos adicionar algumas melhorias no backend (app.js) para incluir funções de busca por palavra-chave e planos de leitura:

// ... (código anterior)

// Rota para busca por palavra-chave
app.get('/api/busca/:palavra', (req, res) => {
    const { palavra } = req.params;
    const query = `
        SELECT l.nome as livro, v.capitulo, v.versiculo, v.texto
        FROM versiculos v
        JOIN livros l ON v.livro_id = l.id
        WHERE v.texto LIKE ?
        LIMIT 50
    `;
    db.query(query, [`%${palavra}%`], (err, results) => {
        if (err) throw err;
        res.json(results);
    });
});

// Rota para obter planos de leitura
app.get('/api/planos-leitura', (req, res) => {
    const planos = [
        { id: 1, nome: "Novo Testamento em 30 dias" },
        { id: 2, nome: "Bíblia em um ano" },
        { id: 3, nome: "Salmos em 30 dias" }
    ];
    res.json(planos);
});

// Rota para obter detalhes de um plano de leitura
app.get('/api/plano-leitura/:id', (req, res) => {
    const { id } = req.params;
    // Aqui você poderia buscar os detalhes do plano no banco de dados
    // Por simplicidade, estamos retornando dados fixos
    const planos = {
        1: [
            { dia: 1, leitura: "Mateus 1-5" },
            { dia: 2, leitura: "Mateus 6-10" },
            // ... mais dias
        ],
        2: [
            { dia: 1, leitura: "Gênesis 1-3" },
            { dia: 2, leitura: "Gênesis 4-7" },
            // ... mais dias
        ],
        3: [
            { dia: 1, leitura: "Salmos 1-5" },
            { dia: 2, leitura: "Salmos 6-10" },
            // ... mais dias
        ]
    };
    res.json(planos[id] || []);
});

// ... (resto do código)

Com essas adições, agora temos um aplicativo mais completo que inclui:



// ... (código anterior)

// Middleware de tratamento de erros
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({
        error: 'Ocorreu um erro no servidor',
        details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
});

// ... (resto do código)

Adicionar validação de entrada de dados:

Instale a biblioteca express-validator

npm install express-validator

const { body, validationResult } = require('express-validator');

// ... (código anterior)

// Middleware de validação
const validate = (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    next();
};

// Exemplo de uso na rota de registro
app.post('/api/register', [
    body('nome').notEmpty().withMessage('Nome é obrigatório'),
    body('email').isEmail().withMessage('Email inválido'),
    body('senha').isLength({ min: 6 }).withMessage('A senha deve ter no mínimo 6 caracteres')
], validate, async (req, res) => {
    // ... (código de registro)
});

// ... (resto do código)

3 Implementar um sistema de logout:

const logoutButton = document.createElement('button');
logoutButton.textContent = 'Logout';
logoutButton.addEventListener('click', () => {
    localStorage.removeItem('token');
    loginButton.style.display = 'inline';
    registerButton.style.display = 'inline';
    logoutButton.style.display = 'none';
    alert('Logout realizado com sucesso!');
});
document.querySelector('#userSection').appendChild(logoutButton);

function checkLoginStatus() {
    const token = localStorage.getItem('token');
    if (token) {
        loginButton.style.display = 'none';
        registerButton.style.display = 'none';
        logoutButton.style.display = 'inline';
    } else {
        loginButton.style.display = 'inline';
        registerButton.style.display = 'inline';
        logoutButton.style.display = 'none';
    }
}


4 Melhorar a segurança:

Para usar HTTPS, você precisará de um certificado SSL. Em desenvolvimento, você pode usar um certificado autoassinado. Em produção, use um serviço como Let's Encrypt. Aqui está como você poderia configurar HTTPS em seu servidor Node.js:

const https = require('https');
const fs = require('fs');

const options = {
  key: fs.readFileSync('path/to/key.pem'),
  cert: fs.readFileSync('path/to/cert.pem')
};

https.createServer(options, app).listen(443, () => {
  console.log('Servidor HTTPS rodando na porta 443');
});


5 Adicionar mais funcionalidades aos planos de leitura:

No backend (app.js), adicione

// Rota para obter progresso do plano de leitura
app.get('/api/progresso-plano/:userId/:planoId', verifyToken, (req, res) => {
    const { userId, planoId } = req.params;
    // Aqui você buscaria o progresso no banco de dados
    // Por simplicidade, estamos retornando dados fixos
    res.json({
        planoId,
        progresso: 30, // porcentagem
        ultimaLeitura: '2023-07-26'
    });
});

// Rota para atualizar progresso do plano de leitura
app.post('/api/atualizar-progresso', verifyToken, (req, res) => {
    const { planoId, diaCompleto } = req.body;
    // Aqui você atualizaria o progresso no banco de dados
    res.json({ message: 'Progresso atualizado com sucesso' });
});

6 Implementar um sistema para carregar o banco de dados:

Crie um script separado para carregar o banco de dados (loadDatabase.js):

const mysql = require('mysql2');
const fs = require('fs');

const db = mysql.createConnection({
    host: 'localhost',
    user: 'seu_usuario',
    password: 'sua_senha',
    database: 'biblia_harpa_app'
});

function loadBiblia() {
    const bibliaData = JSON.parse(fs.readFileSync('biblia.json', 'utf8'));
    // Insira os dados no banco de dados
}

function loadHarpa() {
    const harpaData = JSON.parse(fs.readFileSync('harpa.json', 'utf8'));
    // Insira os dados no banco de dados
}

loadBiblia();
loadHarpa();


7 Melhorar a interface do usuário:

Para uma aplicação mais robusta, considere usar um framework como React. Aqui está um exemplo básico de como você poderia estruturar seu componente principal em React:

import React, { useState, useEffect } from 'react';

function App() {
    const [contentType, setContentType] = useState('bible');
    const [book, setBook] = useState('');
    const [chapter, setChapter] = useState(1);
    const [verse, setVerse] = useState(1);
    const [content, setContent] = useState('');

    useEffect(() => {
        // Buscar conteúdo quando os inputs mudarem
    }, [contentType, book, chapter, verse]);

    return (
        <div>
            <header>{/* ... */}</header>
            <nav>
                <select value={contentType} onChange={e => setContentType(e.target.value)}>
                    <option value="bible">Bíblia</option>
                    <option value="hymnal">Harpa Cristã</option>
                </select>
                {/* Outros inputs */}
            </nav>
            <main>{content}</main>
            <footer>{/* ... */}</footer>
        </div>
    );
}

8 Implementar testes unitários e de integração:

Para testes, você pode usar Jest. Aqui está um exemplo de teste para a rota de login


const request = require('supertest');
const app = require('./app');

describe('Login API', () => {
    it('should login successfully with correct credentials', async () => {
        const res = await request(app)
            .post('/api/login')
            .send({
                email: 'test@example.com',
                senha: 'password123'
            });
        expect(res.statusCode).toEqual(200);
        expect(res.body).toHaveProperty('token');
    });
});


9 Configurar um ambiente de produção:

Para usar PM2, primeiro instale-o globalmente:

npm install -g pm2

Então, crie um arquivo de configuração chamado ecosystem.config.js:

module.exports = {
  apps : [{
    name: 'biblia-harpa-app',
    script: 'app.js',
    instances: 'max',
    autorestart: true,
    watch: false,
    max_memory_restart: '1G',
    env: {
      NODE_ENV: 'development'
    },
    env_production: {
      NODE_ENV: 'production'
    }
  }]
};


Para iniciar o aplicativo em produção:

pm2 start ecosystem.config.js --env production

10 Implementar um sistema de cache:

Você pode usar Redis para cache. Primeiro, instale o pacote redis:
10 

npm install redis

Então, no backend (app.js)

const redis = require('redis');
const client = redis.createClient();

// Exemplo de uso de cache para busca de versículo
app.get('/api/versiculo/:livro/:capitulo/:versiculo', (req, res) => {
    const { livro, capitulo, versiculo } = req.params;
    const cacheKey = `versiculo:${livro}:${capitulo}:${versiculo}`;

    client.get(cacheKey, (err, cachedData) => {
        if (cachedData) {
            return res.json(JSON.parse(cachedData));
        }

        // Se não estiver no cache, busque no banco de dados
        const query = `
            SELECT v.texto 
            FROM versiculos v 
            JOIN livros l ON v.livro_id = l.id 
            WHERE l.nome = ? AND v.capitulo = ? AND v.versiculo = ?
        `;
        db.query(query, [livro, capitulo, versiculo], (err, result) => {
            if (err) throw err;
            const data = result[0] || { texto: 'Versículo não encontrado' };
            
            // Armazene no cache por 1 hora
            client.setex(cacheKey, 3600, JSON.stringify(data));
            
            res.json(data);
        });
    });
});






